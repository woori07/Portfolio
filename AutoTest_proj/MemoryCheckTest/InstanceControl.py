# Generated by Selenium IDE

import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import Select
import argparse
import subprocess

# 인스턴스 추가 삭제 자동화
class Control_Map():
   
   # 디버그 모드로 크롬 실행 -> 로그인 -> 시험용 프로젝트 진입
   def __init__(self):
      subprocess.run('cd "C:/Program Files/Google/Chrome/Application" && \
               start chrome.exe --remote-debugging-port=9222 --user-data-dir="C:/ChromeTEMP"', shell=True)
      chrome_options = Options()
      chrome_options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")
      self.driver = webdriver.Chrome(options=chrome_options)
      self.driver.get('https://192.168.11.10:8081/')
      self.driver.find_element(By.NAME, 'email').send_keys('admin@admin.com')
      self.driver.find_element(By.NAME, 'password').send_keys('crossent12')
      self.driver.find_element(By.NAME, 'button').click()
      time.sleep(3)
      self.driver.find_element(By.XPATH, '//*[@id="btn-set3"]/span[2]').click()
      time.sleep(1)
      self.driver.switch_to.window(self.driver.window_handles[-1])
      self.driver.find_element(By.XPATH, '//*[text()="load-test"]').click()
      self.driver.get("https://192.168.11.10:8081/#/iaas/compute")
      time.sleep(2)
      self.variables()

   # 변수 객체 
   def variables(self):
        self.plus_icon_locator = (By.XPATH, '//*[@id="mainContents"]/div/div[1]/div/div[2]/button[2]/span')
        self.instance_name_locator = (By.NAME, "instanceName")
        self.zone_dropdown_locator = (By.XPATH, '//*[@id="mainContents"]/div/div/div[1]/div[1]/div/div[2]/form/div/div/div[4]/div[2]/select')
        self.create_btn_locator = (By.XPATH, '//*[@id="mainContents"]/div/div/div[1]/div[2]/div/button[1]')
        self.delete_dropdown_locator = (By.XPATH, '//*[@id="mainContents"]/div/div[2]/table/tbody/tr[1]/td[9]/select')
        self.delete_confirm = (By.XPATH, '//*[@id="dialogContent_1"]/div/div[3]/button[1]')


   # 행위 객체 분리
   def find_element(self, locator):
        return self.driver.find_element(*locator)

   def find_select(self, locator):
        return Select(self.find_element(locator))
   

   # 인스턴스 추가
   def create_instance(self, startnum):
   
      # plus_icon 클릭 -> instance_name 클릭 -> dropdown 선택 -> create_btn 클릭
      for i in range(startnum, 90):
        time.sleep(1.5)
        self.find_element(self.plus_icon_locator).click()
        time.sleep(1.5)
        self.find_element(self.instance_name_locator).send_keys(f"SC{i}")
        self.find_select(self.zone_dropdown_locator).select_by_index(2)
        time.sleep(1.5)
        self.find_element(self.create_btn_locator).click()
        time.sleep(10)

   # 인스턴스 삭제
   def remove_instance(self, startnum):
       
       # remove dropdown 선택 -> present window change -> delete button 클릭
       for i in range(1, startnum):
         time.sleep(1.5)
         try:
            self.find_select(self.delete_dropdown_locator).select_by_index(9)
            self.driver.switch_to.window(self.driver.window_handles[-1])
            self.find_element(self.delete_confirm).click()
            time.sleep(10)
            self.driver.refresh()
         except:
            print("종료되었습니다.")
            raise AttributeError


if __name__ == "__main__":

   parser = argparse.ArgumentParser()
   parser.add_argument("-t", "--type", type=str, required=True)
   parser.add_argument("-n", "--num", type=int, required=True)
   args = parser.parse_args()
   ci = Control_Map()

   if args.type == 'create':
      ci.create_instance(args.num)
   elif args.type == 'remove': # 추가예정
      ci.remove_instance(args.num)
   else:
      raise AttributeError

